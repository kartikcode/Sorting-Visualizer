{"version":3,"sources":["SortingAlgorithms/mergeSort.jsx","SortingAlgorithms/quickSort.jsx","SortingVisualizer/SortingVisualizer.jsx","SortingAlgorithms/bubbleSort.jsx","App.js","serviceWorker.js","index.js"],"names":["getMergeSortAnimations","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","i","j","push","doMerge","swap","items","leftIndex","rightIndex","temp","quickSortPartition","left","right","pivot","doQuickSort","index","console","log","useStyles1","makeStyles","root1","width","input","useStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","StyledMenu","withStyles","paper","border","props","Menu","elevation","getContentAnchorEl","anchorOrigin","vertical","horizontal","transformOrigin","StyledMenuItem","backgroundColor","palette","primary","main","color","common","white","MenuItem","SortingVisualizer","React","useState","speed","setSpeed","state","setState","classes1","value","setValue","setWidth","classes","anchorEl","setAnchorEl","anchorEl1","setAnchorEl1","algo","setAlgo","useEffect","resetArray","start","end","random","arrayBars","document","getElementsByClassName","arrayLength","style","resetBars","handleClose","handleClose1","handleAlgo","event","currentTarget","id","handleSpeed","makeAllBarsGreen","quickSort","arrayOne","arrayTwo","arraysAreEqual","sort","a","b","getQuickSortAnimations","setTimeout","oldPosition","newPosition","oldBarStyle","newBarStyle","dummyAnimations","height","currentPosition","Fragment","className","AppBar","position","Toolbar","Button","variant","onClick","Box","m","aria-controls","aria-haspopup","keepMounted","open","Boolean","onClose","ListItemText","Typography","alert","barOneIdx","barTwoIdx","barOneStyle","barTwoStyle","newHeight","mergeSort","swapped","doBubbleSort","getBubbleSortAnimations","bubbleSort","map","idx","key","fontSize","Grid","container","alignItems","item","xs","Slider","onChange","newValue","aria-labelledby","min","max","class","href","App","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.87e06971.chunk.js","sourcesContent":["export function getMergeSortAnimations(array) {\r\n    const animations = [];\r\n    if (array.length <= 1) return array;\r\n    const auxiliaryArray = array.slice();\r\n    mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\r\n    return animations;\r\n  }\r\n  \r\n  function mergeSortHelper(\r\n    mainArray,\r\n    startIdx,\r\n    endIdx,\r\n    auxiliaryArray,\r\n    animations\r\n  ) {\r\n    if (startIdx === endIdx) return;\r\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);\r\n    mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\r\n    mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\r\n    doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\r\n  }\r\n  \r\n  export function doMerge(\r\n    mainArray,\r\n    startIdx,\r\n    middleIdx,\r\n    endIdx,\r\n    auxiliaryArray,\r\n    animations\r\n  ) {\r\n    let k = startIdx;\r\n    let i = startIdx;\r\n    let j = middleIdx + 1;\r\n    while (i <= middleIdx && j <= endIdx) {\r\n      // These are the values that we're comparing; we push them once\r\n      // to change their color.\r\n      animations.push([i, j]);\r\n      // These are the values that we're comparing; we push them a second\r\n      // time to revert their color.\r\n      animations.push([i, j]);\r\n      if (auxiliaryArray[i] <= auxiliaryArray[j]) {\r\n        // We overwrite the value at index k in the original array with the\r\n        // value at index i in the auxiliary array.\r\n        animations.push([k, auxiliaryArray[i]]);\r\n        mainArray[k++] = auxiliaryArray[i++];\r\n      } else {\r\n        // We overwrite the value at index k in the original array with the\r\n        // value at index j in the auxiliary array.\r\n        animations.push([k, auxiliaryArray[j]]);\r\n        mainArray[k++] = auxiliaryArray[j++];\r\n      }\r\n    }\r\n    while (i <= middleIdx) {\r\n      // These are the values that we're comparing; we push them once\r\n      // to change their color.\r\n      animations.push([i, i]);\r\n      // These are the values that we're comparing; we push them a second\r\n      // time to revert their color.\r\n      animations.push([i, i]);\r\n      // We overwrite the value at index k in the original array with the\r\n      // value at index i in the auxiliary array.\r\n      animations.push([k, auxiliaryArray[i]]);\r\n      mainArray[k++] = auxiliaryArray[i++];\r\n    }\r\n    while (j <= endIdx) {\r\n      // These are the values that we're comparing; we push them once\r\n      // to change their color.\r\n      animations.push([j, j]);\r\n      // These are the values that we're comparing; we push them a second\r\n      // time to revert their color.\r\n      animations.push([j, j]);\r\n      // We overwrite the value at index k in the original array with the\r\n      // value at index j in the auxiliary array.\r\n      animations.push([k, auxiliaryArray[j]]);\r\n      mainArray[k++] = auxiliaryArray[j++];\r\n    }\r\n  }","export function getQuickSortAnimations(array) {\r\n    const animations = [];\r\n    if (array.length <= 1) return array;\r\n    const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\r\n    if (arraysAreEqual(javaScriptSortedArray, array)) return animations;\r\n    const auxiliaryArray = array.slice();\r\n    doQuickSort(animations, auxiliaryArray, 0, auxiliaryArray.length - 1);\r\n    return animations;\r\n  }\r\n  function arraysAreEqual(arrayOne, arrayTwo) {\r\n    if (arrayOne.length !== arrayTwo.length) return false;\r\n    for (let i = 0; i < arrayOne.length; i++) {\r\n      if (arrayOne[i] !== arrayTwo[i]) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n  \r\n  function swap(animations, items, leftIndex, rightIndex) {\r\n    var temp = items[leftIndex];\r\n    items[leftIndex] = items[rightIndex];\r\n    items[rightIndex] = temp;\r\n  \r\n    animations.push([leftIndex, rightIndex]);\r\n  }\r\n  export function quickSortPartition(items, left, right, animations) {\r\n    var pivot = items[Math.floor((right + left) / 2)], //middle element\r\n      i = left, //left pointer\r\n      j = right; //right pointer\r\n    while (i <= j) {\r\n      while (items[i] < pivot) {\r\n        i++;\r\n      }\r\n      while (items[j] > pivot) {\r\n        j--;\r\n      }\r\n      if (i <= j) {\r\n        swap(animations, items, i, j); //sawpping two elements\r\n        i++;\r\n        j--;\r\n      }\r\n    }\r\n    return i;\r\n  }\r\n  \r\n  export function doQuickSort(animations, items, left, right) {\r\n    var index;\r\n    if (items.length > 1) {\r\n      index = quickSortPartition(items, left, right, animations); //index returned from partition\r\n      if (left < index - 1) {\r\n        //more elements on the left side of the pivot\r\n        doQuickSort(animations, items, left, index - 1);\r\n      }\r\n      if (index < right) {\r\n        //more elements on the right side of the pivot\r\n        doQuickSort(animations, items, index, right);\r\n      }\r\n    }\r\n    console.log(items);\r\n    return items;\r\n  }","import React, { useEffect }from 'react';\r\nimport './index.css';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport { Typography } from '@material-ui/core';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Button from '@material-ui/core/Button';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Menu from '@material-ui/core/Menu';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Box from '@material-ui/core/Box';\r\nimport ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown';\r\n//import { BubbleSort } from \"../SortingAlgorithms/BubbleSort.jsx\";\r\nimport { getMergeSortAnimations } from \"../SortingAlgorithms/mergeSort\";\r\nimport { getBubbleSortAnimations } from \"../SortingAlgorithms/bubbleSort\";\r\nimport { doBubbleSort } from \"../SortingAlgorithms/bubbleSort\";\r\nimport { getQuickSortAnimations } from \"../SortingAlgorithms/quickSort\";\r\nimport { doQuickSort } from \"../SortingAlgorithms/quickSort\";\r\nimport { quickSortPartition } from \"../SortingAlgorithms/quickSort\";\r\n\r\nconst useStyles1 = makeStyles({\r\n    root1: {\r\n        width: 250,\r\n    },\r\n    input: {\r\n        width: 42,\r\n    },\r\n});\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n    menuButton: {\r\n        marginRight: theme.spacing(2),\r\n    },\r\n    title: {\r\n        flexGrow: 1,\r\n    },\r\n}));\r\n\r\nconst StyledMenu = withStyles({\r\n    paper: {\r\n        border: '1px solid #d3d4d5',\r\n    },\r\n})((props) => (\r\n    <Menu\r\n        elevation={0}\r\n        getContentAnchorEl={null}\r\n        anchorOrigin={{\r\n            vertical: 'bottom',\r\n            horizontal: 'center',\r\n        }}\r\n        transformOrigin={{\r\n            vertical: 'top',\r\n            horizontal: 'center',\r\n        }}\r\n        {...props}\r\n    />\r\n));\r\n\r\nconst StyledMenuItem = withStyles((theme) => ({\r\n    root: {\r\n        '&:focus': {\r\n            backgroundColor: theme.palette.primary.main,\r\n            '& .MuiListItemIcon-root, & .MuiListItemText-primary': {\r\n                color: theme.palette.common.white,\r\n            },\r\n        },\r\n    },\r\n}))(MenuItem);\r\n\r\n\r\n\r\nexport default function SortingVisualizer(){\r\n\r\n    // Change this value for the speed of the animations.\r\nconst [speed,setSpeed] = React.useState(100);\r\n\r\n// Change this value for the number of bars (value) in the array.\r\nconst NUMBER_OF_ARRAY_BARS = 350;\r\n\r\n// This is the main color of the array bars.\r\nconst PRIMARY_COLOR = \"red\";\r\n\r\n// This is the color of array bars that are being compared throughout the animations.\r\nconst SECONDARY_COLOR = \"green\";\r\n\r\n\r\n\r\n\r\n    const initialState = {\r\n        array: []\r\n    }\r\n\r\n    const [state, setState] = React.useState(initialState);\r\n    const classes1 = useStyles1();\r\n    const [value, setValue] = React.useState(30);\r\n    const [width, setWidth] = React.useState(80 / 30);\r\n    const classes = useStyles();\r\n    const [anchorEl, setAnchorEl] = React.useState(null);\r\n    const [anchorEl1, setAnchorEl1] = React.useState(null);\r\n    const [algo, setAlgo] = React.useState('');\r\n\r\n    const handleSliderChange = (event, newValue) => {\r\n        setValue(newValue);\r\n        setWidth(80 / value);\r\n        resetArray();\r\n    };\r\n\r\n    const handleInputChange = (event) => {\r\n        setValue(event.target.value === '' ? '' : Number(event.target.value));\r\n        resetArray();\r\n        console.log(event.target.value);\r\n    };\r\n\r\n    const handleBlur = () => {\r\n        if (value < 0) {\r\n            setValue(0);\r\n        } else if (value > 100) {\r\n            setValue(100);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        resetArray();\r\n    },[]);\r\n    \r\n    const  resetBars = () => {\r\n        console.log(\"Reset Bars\");\r\n        const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n        var arrayLength = arrayBars.length;\r\n        for (let j = 0; j < arrayLength; j++) {\r\n          var jBarStyle = arrayBars[j].style;\r\n          jBarStyle.backgroundColor = \"blueviolet\";\r\n        }\r\n      }\r\n\r\n    const resetArray = () => {\r\n        const array = [];\r\n        for (let i = 0; i < value; i++) {\r\n            array.push(randomIntfromInterval(20, 600));\r\n        }\r\n        resetBars();\r\n        setState({array});\r\n    }\r\n\r\n    const handleClick = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n        console.log(anchorEl1);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        console.log(algo);\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    const handleClick1 = (event) => {\r\n        setAnchorEl1(event.currentTarget);\r\n        console.log(anchorEl1);\r\n    };\r\n\r\n    const handleClose1 = () => {\r\n        console.log(algo);\r\n        setAnchorEl1(null);\r\n    };\r\n\r\n    const handleAlgo = (event) => {\r\n        //console.log(event.currentTarget.id);\r\n        setAlgo(event.currentTarget.id);\r\n        //console.log(algo);\r\n        handleClose1();\r\n    }\r\n\r\n    const handleSpeed = (event) => {\r\n        //console.log(event.currentTarget.id);\r\n        setSpeed(event.currentTarget.id);\r\n        console.log(speed);\r\n        handleClose();\r\n    }\r\n\r\n    const { array } = state;\r\n\r\n    const  makeAllBarsGreen = () => {\r\n        console.log(\"Sorted\");\r\n        const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n        var arrayLength = arrayBars.length;\r\n        for (let j = 0; j < arrayLength; j++) {\r\n          var jBarStyle = arrayBars[j].style;\r\n          jBarStyle.backgroundColor = \"limegreen\";\r\n        }\r\n      }\r\n\r\n    const bubbleSort = () => {\r\n        const animations = getBubbleSortAnimations(array);\r\n        console.log(animations);\r\n        const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n    \r\n        for (let i = 0; i < animations.length; i++) {\r\n          setTimeout(() => {\r\n            var [oldPosition, newPosition] = animations[i];\r\n    \r\n            var oldBarStyle = arrayBars[oldPosition].style;\r\n            var newBarStyle = arrayBars[newPosition].style;\r\n    \r\n            var temp = array[oldPosition];\r\n            array[oldPosition] = array[newPosition];\r\n            array[newPosition] = temp;\r\n    \r\n            oldBarStyle.height = `${array[oldPosition]}px`;\r\n            newBarStyle.height = `${array[newPosition]}px`;\r\n    \r\n            oldBarStyle.backgroundColor = \"red\";\r\n            newBarStyle.backgroundColor = \"green\";\r\n    \r\n            var currentPosition = oldPosition;\r\n            for (let j = 0; j < currentPosition; j++) {\r\n              var jBarStyle = arrayBars[j].style;\r\n              jBarStyle.backgroundColor = \"red\";\r\n            }\r\n            if (i === animations.length - 1) {\r\n              makeAllBarsGreen();\r\n            }\r\n          }, i * speed);\r\n        }\r\n      }\r\n\r\n    const quickSort = () => {\r\n        // We leave it as an exercise to the viewer of this code to implement this method.\r\n        const animations = getQuickSortAnimations(array);\r\n        console.log(animations);\r\n        const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n    \r\n        for (let i = 0; i < animations.length; i++) {\r\n          setTimeout(() => {\r\n            var [oldPosition, newPosition] = animations[i];\r\n    \r\n            var oldBarStyle = arrayBars[oldPosition].style;\r\n            var newBarStyle = arrayBars[newPosition].style;\r\n            var index;\r\n            const dummyAnimations = [];\r\n            if (array.length > 1) {\r\n              index = quickSortPartition(\r\n                array,\r\n                0,\r\n                array.length - 1,\r\n                dummyAnimations\r\n              ); //index returned from partition\r\n              if (0 < index - 1) {\r\n                //more elements on the left side of the pivot\r\n                doQuickSort(dummyAnimations, array, 0, index - 1);\r\n              }\r\n              if (index < array.length) {\r\n                //more elements on the right side of the pivot\r\n                doQuickSort(dummyAnimations, array, 0, array.length - 1);\r\n              }\r\n            }\r\n    \r\n            oldBarStyle.height = `${array[oldPosition]}px`;\r\n            newBarStyle.height = `${array[newPosition]}px`;\r\n    \r\n            oldBarStyle.backgroundColor = \"green\";\r\n            newBarStyle.backgroundColor = \"red\";\r\n    \r\n            var currentPosition = oldPosition;\r\n            for (let j = 0; j < currentPosition; j++) {\r\n              var jBarStyle = arrayBars[j].style;\r\n              jBarStyle.backgroundColor = \"green\";\r\n            }\r\n            if (i === animations.length - 1) {\r\n              makeAllBarsGreen();\r\n            }\r\n          }, i*speed);\r\n        }\r\n      }\r\n    \r\n    \r\n    const mergeSort = () => {\r\n        const animations = getMergeSortAnimations(array);\r\n    \r\n        for (let i = 0; i < animations.length; i++) {\r\n          const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n          const isColorChange = i % 3 !== 2;\r\n          if (isColorChange) {\r\n            const [barOneIdx, barTwoIdx] = animations[i];\r\n            const barOneStyle = arrayBars[barOneIdx].style;\r\n            const barTwoStyle = arrayBars[barTwoIdx].style;\r\n            const color = i % 3 === 0 ? PRIMARY_COLOR : SECONDARY_COLOR;\r\n            setTimeout(() => {\r\n              barOneStyle.backgroundColor = color;\r\n              barTwoStyle.backgroundColor = color;\r\n              if (i === animations.length - 1) {\r\n                makeAllBarsGreen();\r\n              }\r\n            }, i * speed);\r\n          } else {\r\n            setTimeout(() => {\r\n              const [barOneIdx, newHeight] = animations[i];\r\n              const barOneStyle = arrayBars[barOneIdx].style;\r\n              barOneStyle.height = `${newHeight}px`;\r\n              if (i === animations.length - 1) {\r\n                //makeAllBarsGreen();\r\n              }\r\n            }, i * speed);\r\n          }\r\n        }\r\n      }\r\n\r\n    const startSort = () => {\r\n        if (algo === '') {\r\n            alert('Hey there!\\n This is a sorting visulaizer, so I expect you to pick a sorting algorithm of your choice !!\\nHappy Coding!')\r\n        }\r\n        else if (algo === \"merge\") {\r\n            //let sorted_array = BubbleSort(array);\r\n            //setState({ sorted_array });\r\n            mergeSort();\r\n        }\r\n        else if (algo === \"bubble\") {\r\n            //let sorted_array = BubbleSort(array);\r\n            //setState({ sorted_array });\r\n            bubbleSort();\r\n        }\r\n        else if (algo === \"quick\") {\r\n            //let sorted_array = BubbleSort(array);\r\n            //setState({ sorted_array });\r\n            quickSort();\r\n        }\r\n    }\r\n\r\n        return(\r\n            <React.Fragment >\r\n                <div className={classes.root}>\r\n                    <AppBar position=\"static\">\r\n                        <Toolbar>\r\n                            <Button variant=\"contained\" color=\"secondary\" onClick={resetArray}>\r\n                                Generate New Array\r\n                    </Button>\r\n                            <Box m={1}>\r\n                                <Button\r\n                                    aria-controls=\"customized-menu\"\r\n                                    aria-haspopup=\"true\"\r\n                                    variant=\"contained\"\r\n                                    color=\"secondary\"\r\n                                    onClick={handleClick1}\r\n                                >\r\n                                    Sorting Algorithm<ArrowDropDownIcon color=\"basic\"></ArrowDropDownIcon>\r\n                                </Button></Box>\r\n                            <StyledMenu\r\n                                id=\"customized-menu\"\r\n                                anchorEl={anchorEl1}\r\n                                keepMounted\r\n                                open={Boolean(anchorEl1)}\r\n                                onClose={handleClose1}\r\n                            >\r\n                                <StyledMenuItem>\r\n                                    <ListItemText primary=\"Merge Sort\" id=\"merge\" onClick={handleAlgo} />\r\n                                </StyledMenuItem>\r\n                                <StyledMenuItem>\r\n                                    <ListItemText primary=\"Bubble Sort\" id=\"bubble\" onClick={handleAlgo} />\r\n                                </StyledMenuItem>\r\n                                <StyledMenuItem>\r\n                                    <ListItemText primary=\"Quick Sort\" id=\"quick\" onClick={handleAlgo} />\r\n                                </StyledMenuItem>\r\n                                <StyledMenuItem>\r\n                                    <ListItemText primary=\"Selection Sort\" id=\"selection\" onClick={handleAlgo} />\r\n                                </StyledMenuItem>\r\n                            </StyledMenu>\r\n                            <Box m={1}>\r\n                                <Button\r\n                                    aria-controls=\"customized-menu\"\r\n                                    aria-haspopup=\"true\"\r\n                                    variant=\"contained\"\r\n                                    color=\"secondary\"\r\n                                    onClick={handleClick}\r\n                                >\r\n                                    Animation Speed<ArrowDropDownIcon color=\"basic\"></ArrowDropDownIcon>\r\n                                </Button></Box>\r\n                            <StyledMenu\r\n                                id=\"customized-menu\"\r\n                                anchorEl={anchorEl}\r\n                                keepMounted\r\n                                open={Boolean(anchorEl)}\r\n                                onClose={handleClose}\r\n                            >\r\n                                <StyledMenuItem>\r\n                                    <ListItemText primary=\"1\" id=\"1\" onClick={handleSpeed} />\r\n                                </StyledMenuItem>\r\n                                <StyledMenuItem>\r\n                                    <ListItemText primary=\"5\" id=\"5\" onClick={handleSpeed} />\r\n                                </StyledMenuItem>\r\n                                <StyledMenuItem>\r\n                                    <ListItemText primary=\"10\" id=\"10\" onClick={handleSpeed} />\r\n                                </StyledMenuItem>\r\n                                <StyledMenuItem>\r\n                                    <ListItemText primary=\"50\" id=\"50\" onClick={handleSpeed} />\r\n                                </StyledMenuItem>\r\n                                <StyledMenuItem>\r\n                                    <ListItemText primary=\"100\" id=\"100\" onClick={handleSpeed} />\r\n                                </StyledMenuItem>\r\n                            </StyledMenu>\r\n                            <Typography variant=\"h6\" className={classes.title}>\r\n                            </Typography>\r\n                            <Button variant=\"contained\" color=\"secondary\" onClick={startSort}>\r\n                                {algo} Sort!\r\n                    </Button>\r\n\r\n                        </Toolbar>\r\n                    </AppBar>\r\n                </div>\r\n            <div className=\"holder\">\r\n                {\r\n                    array.map((value, idx) => (\r\n                        <div className=\"array-bar\" key={idx} style={{ height: `${value}px`, width: `${width}%`, fontSize: `${width * 20}%` }}>\r\n                            {value}\r\n                        </div>\r\n                    ))\r\n                    }\r\n                    </div>\r\n            <div className=\"range-slider\">\r\n                    <div className={classes1.root1}>\r\n                        <Grid container spacing={2} alignItems=\"center\">\r\n                            <Grid item xs>\r\n                                <Slider\r\n                                    value={typeof value === 'number' ? value : 0}\r\n                                    onChange={handleSliderChange}\r\n                                    aria-labelledby=\"input-slider\"\r\n                                    color=\"secondary\"\r\n                                    min={10}\r\n                                    max={100}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <Typography>Adjust Array Size</Typography>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </div>\r\n                </div>\r\n                <div class=\"footer\">\r\n                    <p>Follow me: <a href=\"https://github.com/kartikcode\">kartikcode@Github</a></p>\r\n                </div>\r\n            </React.Fragment >\r\n        );\r\n    };\r\n\r\n\r\nfunction randomIntfromInterval(start, end) {\r\n    return Math.floor(Math.random() * (start - end + 1) + end);\r\n}\r\n","export function getBubbleSortAnimations(array) {\r\n    const animations = [];\r\n    if (array.length <= 1) return array;\r\n    const auxiliaryArray = array.slice();\r\n    doBubbleSort(animations, auxiliaryArray);\r\n    return animations;\r\n  }\r\n  \r\n  export function doBubbleSort(animations, auxiliaryArray) {\r\n    var swapped;\r\n    do {\r\n      swapped = false;\r\n      for (var i = 0; i < auxiliaryArray.length - 1; i++) {\r\n        if (auxiliaryArray[i] > auxiliaryArray[i + 1]) {\r\n          var temp = auxiliaryArray[i];\r\n          auxiliaryArray[i] = auxiliaryArray[i + 1];\r\n          auxiliaryArray[i + 1] = temp;\r\n          animations.push([i, i + 1]);\r\n          swapped = true;\r\n        }\r\n      }\r\n    } while (swapped);\r\n    return auxiliaryArray;\r\n  }","import React from 'react';\r\nimport './App.css';\r\nimport SortingVisualizer from \"./SortingVisualizer/SortingVisualizer\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n       <SortingVisualizer></SortingVisualizer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}